<?php
/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace SwaggerPetstoreLib;

/**
 * Utility class for OAuth 2 authorization and token management
 */
class OAuthManager
{
    /**
     * @var OAuthManager The reference to singleton instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return OAuthManager The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Constructor
     */
    private function __construct()
    {
    }

    /**
     * Build an authorization URL for taking the user's consent to access data
     * @param  array|string|null $scope            List of scopes needed
     * @param  string|null       $state            An opaque state string
     * @param  array|null        $additionalParams Additional parameters to add the the authorization URL
     * @return string
     */
    public function buildAuthorizationUrl($scope = null, $state = null, $additionalParams = null)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::getBaseUri(Servers::AUTH_SERVER);

        //prepare query string for API call
        $queryBuilder = $queryBuilder . '/authorize';

        //build query params
        $queryParams = array (
            'response_type' => 'token',
            'client_id'     => Configuration::$oAuthClientId,
            'redirect_uri'  => Configuration::$oAuthRedirectUri,
            'scope'         => is_array($scope) ? implode(' ', $scope) : $scope,
            'state'         => $state
        );

        if ($additionalParams != null && is_array($additionalParams)) {
            $queryParams = array_merge($additionalParams, $queryParams);
        }

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, $queryParams);

        //validate and preprocess url
        return APIHelper::cleanUrl($queryBuilder);
    }
}
